#include <bits/stdc++.h>
using namespace std;

struct Point {
    int x;
    int y;
};

bool compare(Point p1, Point p2) {
    return (p1.x<p2.x || (p1.x == p2.x && p1.y<p2.y));
}

int orientation(Point p1,Point p2,Point p3) {
    int val = ( (p3.y-p2.y)*(p2.x-p1.x) - (p3.x-p2.x)*(p2.y-p1.y));

    if (val==0) {
        return 0;
    }
    return (val>0) ? 1:2;
}

vector<Point> graham_scan(Point points[], int n) {

    Point p0 = *min_element(points, points+n, compare);

    sort(points, points+n, [p0](Point p1, Point p2) {

        int o = orientation(p0, p1, p2);

        if (o==0) {
            return ((p1.x-p0.x)*(p1.x-p0.x) + (p1.y-p0.y)*(p1.y-p0.y) < (p2.x-p0.x)*(p2.x-p0.x) + (p2.y-p0.y)*(p2.y-p0.y));
        }

        return o==2;
    });

    vector<Point> hull;
    hull.push_back(p0);
    hull.push_back(points[0]);
    hull.push_back(points[1]);

    for (int i=2; i<n; i++) {

        while (hull.size()>1 && orientation(hull[hull.size()-2],hull.back(),points[i])!=2) {
            hull.pop_back();
        }
        hull.push_back(points[i]);
    }
    return hull;
}

int main() {

    Point points[] = {{0, 3}, {2, 2}, {1, 1}, {2, 1}, {3, 0}, {0, 0}, {3, 3}};

    int n = sizeof(points) / sizeof(points[0]);

    vector<Point> hull = graham_scan(points, n);

    cout << "Points in the Convex Hull:\n";
    for (const auto& p : hull) {
        cout << "(" << p.x << ", " << p.y << ")\n";
    }

return 0;}

